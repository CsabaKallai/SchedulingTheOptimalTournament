using System;
using System.Collections.Generic;

namespace Ligak_Optimalis_Kialakitasa.Models.Algorythms
{
    public class GeneticAlgorythm
    {
        static private readonly Random random = new Random();

        private List<Individuals> individuals;
        private double mingoodness;
        private int row_half;
        private int column_half;
        private Tournament tournament;
        private TournamentConstraintsAndRules tournamentConstraintsAndRules;

        public GeneticAlgorythm(ref Tournament tournament, ref TournamentConstraintsAndRules tournamentConstraintsAndRules)
        {
            this.tournament = tournament;
            this.tournamentConstraintsAndRules = tournamentConstraintsAndRules;
            this.individuals = new List<Individuals>();
            this.mingoodness = Double.MaxValue;
            this.row_half = tournamentConstraintsAndRules.NumberOfTeams / 2;
        }

        public static Result Result { get; private set; }

        private void ResultGenerator()
        {
            int index = individuals.Count - 1;
            Result newResult = new Result();
            newResult.GoodnessValue = individuals[index].GoodnessValue;
            newResult.NameOfTournament = tournament.NameOfTournament;
            List<Round> rounds = new List<Round>(2 * (tournamentConstraintsAndRules.NumberOfTeams - 1));

            int matchesindex = 0;
            int round = 0;
            Round r;
            for (int i = 0; i < individuals[index].Utazasi_tabla.GetLength(1); i++)
            {
                r = new Round(tournamentConstraintsAndRules) { NumberOfRound = round };
                for (int j = 0; j < individuals[index].Utazasi_tabla.GetLength(0); j++)
                {

                    if (individuals[index].Utazasi_tabla[j, i] != -1)
                    {
                        if (individuals[index].Utazasi_tabla[j, i] == 0)
                        {
                            r.MatchesOfRound[matchesindex++] = String.Format("  {0}  :  {1}  ",
                                tournament.Teams[j].Name,
                                tournament.Teams[individuals[index].Ellenfelek[j, i]].Name);
                        }
                        else
                        {
                            r.MatchesOfRound[matchesindex++] = String.Format("  {0}  :  {1}  ",
                                tournament.Teams[individuals[index].Ellenfelek[j, i]].Name,
                                tournament.Teams[j].Name);
                        }

                        individuals[index].Utazasi_tabla[j, i] = -1;
                        individuals[index].Utazasi_tabla[individuals[index].Ellenfelek[j, i], i] = -1;
                    }
                }
                matchesindex = 0;
                rounds.Add(r);
                round++;

            }
            newResult.TournamentSchedule = rounds;

            Result = newResult;
        }

        public void GenerateTournament()
        {
            if (this.tournamentConstraintsAndRules.Robins == Robins.Single_Round_Robin)
            {
                CreateIndividualsSingle();
                GeneticAlgorithmSingle();
                this.column_half = row_half;
            }
            else
            {
                CreateIndividuals();
                GeneticAlgorithm();
                this.column_half = tournamentConstraintsAndRules.NumberOfTeams - 1;
            }
            ResultGenerator();
        }

        private void CreateIndividuals()
        {
            int count = tournament.Teams.Length;
            if (count == 4)
            {
                int[,] utazasi_tabla = { { 0, 0, 0, 1, 1, 1 },
                                         { 0, 1, 1, 1, 0, 0 },
                                         { 1, 1, 0, 0, 0, 1 },
                                         { 1, 0, 1, 0, 1, 0 }};

                int[,] ellenfelek_tabla = { { 2, 1, 3, 2, 1, 3 },
                                            { 3, 0, 2, 3, 0, 2 },
                                            { 0, 3, 1, 0, 3, 1 },
                                            { 1, 2, 0, 1, 2, 0 } };

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else if (count == 6)
            {
                int[,] utazasi_tabla = { { 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
                                         { 1, 1, 0, 1, 0, 0, 0, 1, 0, 1 },
                                         { 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
                                         { 0, 0, 1, 0, 1, 1, 1, 0, 1, 0 },
                                         { 1, 0, 1, 1, 0, 0, 1, 0, 0, 1 },
                                         { 0, 1, 0, 0, 1, 1, 0, 1, 1, 0 } };

                int[,] ellenfelek_tabla = { { 3, 2, 5, 1, 4, 3, 2, 5, 1, 4 },
                                            { 2, 4, 3, 0, 5, 2, 4, 3, 0, 5 },
                                            { 1, 0, 4, 5, 3, 1, 0, 4, 5, 3 },
                                            { 0, 5, 1, 4, 2, 0, 5, 1, 4, 2 },
                                            { 5, 1, 2, 3, 0, 5, 1, 2, 3, 0 },
                                            { 4, 3, 0, 2, 1, 4, 3, 0, 2, 1 } };

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else if (count == 8)
            {
                int[,] utazasi_tabla = { { 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
                                         { 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1 },
                                         { 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1 },
                                         { 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0 },
                                         { 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1 },
                                         { 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0 },
                                         { 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0 },
                                         { 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 } };

                int[,] ellenfelek_tabla = { { 1, 3, 6, 5, 7, 2, 4, 1, 3, 6, 5, 7, 2, 4 },
                                            { 0, 5, 7, 2, 4, 6, 3, 0, 5, 7, 2, 4, 6, 3 },
                                            { 7, 6, 4, 1, 3, 0, 5, 7, 6, 4, 1, 3, 0, 5 },
                                            { 6, 0, 5, 7, 2, 4, 1, 6, 0, 5, 7, 2, 4, 1 },
                                            { 5, 7, 2, 6, 1, 3, 0, 5, 7, 2, 6, 1, 3, 0 },
                                            { 4, 1, 3, 0, 6, 7, 2, 4, 1, 3, 0, 6, 7, 2 },
                                            { 3, 2, 0, 4, 5, 1, 7, 3, 2, 0, 4, 5, 1, 7 },
                                            { 2, 4, 1, 3, 0, 5, 6, 2, 4, 1, 3, 0, 5, 6 } };

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else if (count == 10)
            {
                int[,] utazasi_tabla = { { 0,1,0,1,0,0,1,0,1,1,0,1,0,1,1,0,1,0},
                                         { 1,0,0,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0},
                                         { 1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,1,0,1},
                                         { 1,0,1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,1},
                                         { 1,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1},
                                         { 1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
                                         { 0,0,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,1},
                                         { 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
                                         { 0,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0},
                                         { 0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0}};

                int[,] ellenfelek_tabla = { {2,6,8,1,5,7,9,4,3,2,6,8,1,5,7,9,4,3},
                                            {8,7,5,0,9,4,3,2,6,8,7,5,0,9,4,3,2,6},
                                            {0,9,4,3,7,6,8,1,5,0,9,4,3,7,6,8,1,5},
                                            {9,4,7,2,6,8,1,5,0,9,4,7,2,6,8,1,5,0},
                                            {7,3,2,6,8,1,5,0,9,7,3,2,6,8,1,5,0,9},
                                            {6,8,1,7,0,9,4,3,2,6,8,1,7,0,9,4,3,2},
                                            {5,0,9,4,3,2,7,8,1,5,0,9,4,3,2,7,8,1},
                                            {4,1,3,5,2,0,6,9,8,4,1,3,5,2,0,6,9,8},
                                            {1,5,0,9,4,3,2,6,7,1,5,0,9,4,3,2,6,7},
                                            {3,2,6,8,1,5,0,7,4,3,2,6,8,1,5,0,7,4}};

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else if (count == 12)
            {
                int[,] utazasi_tabla = { {0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,1,0},
                                         {1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0},
                                         {0,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,0},
                                         {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,1},
                                         {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {0,0,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1},
                                         {1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1},
                                         {1,1,0,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0},
                                         {0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0},
                                         {0,1,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1},
                                         {1,0,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1}};

                int[,] ellenfelek_tabla = { {4,7,6,10,8,1,5,9,2,3,11,4,7,6,10,8,1,5,9,2,3,11},
                                            {10,8,2,5,9,0,3,11,4,7,6,10,8,2,5,9,0,3,11,4,7,6},
                                            {8,11,1,4,5,7,9,6,0,10,3,8,11,1,4,5,7,9,6,0,10,3},
                                            {11,4,7,6,10,8,1,5,9,0,2,11,4,7,6,10,8,1,5,9,0,2},
                                            {0,3,11,2,7,6,10,8,1,5,9,0,3,11,2,7,6,10,8,1,5,9},
                                            {6,10,8,1,2,9,0,3,11,4,7,6,10,8,1,2,9,0,3,11,4,7},
                                            {5,9,0,3,11,4,7,2,10,8,1,5,9,0,3,11,4,7,2,10,8,1},
                                            {9,0,3,11,4,2,6,10,8,1,5,9,0,3,11,4,2,6,10,8,1,5},
                                            {2,1,5,9,0,3,11,4,7,6,10,2,1,5,9,0,3,11,4,7,6,10},
                                            {7,6,10,8,1,5,2,0,3,11,4,7,6,10,8,1,5,2,0,3,11,4},
                                            {1,5,9,0,3,11,4,7,6,2,8,1,5,9,0,3,11,4,7,6,2,8},
                                            {3,2,4,7,6,10,8,1,6,9,0,3,2,4,7,6,10,8,1,6,9,0}};

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else if (count == 14)
            {
                int[,] utazasi_tabla = { {0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0},
                                         {1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1},
                                         {0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0},
                                         {0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,0},
                                         {1,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1},
                                         {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {0,0,1,0,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,1},
                                         {0,1,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,0,0,1},
                                         {1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0},
                                         {1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,1,0},
                                         {0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,1,0,1,0,1,0,1,0,1,0},
                                         {1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1}};

                int[,] ellenfelek_tabla = { {13,5,1,8,9,12,11,10,6,2,3,7,4,13,5,1,8,9,12,11,10,6,2,3,7,4},
                                            {2,3,0,4,13,5,7,8,9,12,11,10,6,2,3,0,4,13,5,7,8,9,12,11,10,6},
                                            {1,8,9,12,11,10,6,7,3,0,4,13,5,1,8,9,12,11,10,6,7,3,0,4,13,5},
                                            {5,1,8,9,12,11,10,6,2,7,0,4,13,5,1,8,9,12,11,10,6,2,7,0,4,13},
                                            {7,13,5,1,8,9,12,11,10,6,2,3,0,7,13,5,1,8,9,12,11,10,6,2,3,0},
                                            {3,0,4,13,7,1,8,9,12,11,10,6,2,3,0,4,13,7,1,8,9,12,11,10,6,2},
                                            {8,9,12,11,10,7,2,3,0,4,13,5,1,8,9,12,11,10,7,2,3,0,4,13,5,1},
                                            {4,11,13,10,5,6,1,2,8,3,9,0,12,4,11,13,10,5,6,1,2,8,3,9,0,12},
                                            {6,2,3,0,4,13,5,1,7,9,12,11,10,6,2,3,0,4,13,5,1,7,9,12,11,10},
                                            {10,6,2,3,0,4,13,5,1,8,7,12,11,10,6,2,3,0,4,13,5,1,8,7,12,11},
                                            {9,12,11,7,6,2,3,0,4,13,5,1,8,9,12,11,7,6,2,3,0,4,13,5,1,8},
                                            {12,7,10,6,2,3,0,4,13,5,1,8,9,12,7,10,6,2,3,0,4,13,5,1,8,9},
                                            {11,10,6,2,3,0,4,13,5,1,8,9,7,11,10,6,2,3,0,4,13,5,1,8,9,7},
                                            {0,4,7,5,1,8,9,12,11,10,6,2,3,0,4,7,5,1,8,9,12,11,10,6,2,3}};

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else if (count == 16)
            {
                int[,] utazasi_tabla = { {0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0},
                                         {0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1},
                                         {1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0},
                                         {1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1},
                                         {1,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0},
                                         {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1},
                                         {1,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0},
                                         {1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1},
                                         {0,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,1,0,1},
                                         {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0},
                                         {0,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,0,1,0,1},
                                         {0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0},
                                         {1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0}};


                int[,] ellenfelek_tabla = { {9,10,13,1,5,8,15,11,12,14,3,6,2,7,4,9,10,13,1,5,8,15,11,12,14,3,6,2,7,4},
                                            {8,15,11,0,14,3,6,2,7,4,9,10,13,12,5,8,15,11,0,14,3,6,2,7,4,9,10,13,12,5},
                                            {6,12,7,4,9,10,13,1,5,8,15,11,0,14,3,6,12,7,4,9,10,13,1,5,8,15,11,0,14,3},
                                            {7,4,9,10,13,1,5,8,15,11,0,14,12,6,2,7,4,9,10,13,1,5,8,15,11,0,14,12,6,2},
                                            {14,3,6,2,7,12,9,10,13,1,5,8,15,11,0,14,3,6,2,7,12,9,10,13,1,5,8,15,11,0},
                                            {12,8,15,11,0,14,3,6,2,7,4,9,10,13,1,12,8,15,11,0,14,3,6,2,7,4,9,10,13,1},
                                            {2,7,4,9,10,13,1,5,8,15,11,0,14,3,12,2,7,4,9,10,13,1,5,8,15,11,0,14,3,12},
                                            {3,6,2,12,4,9,10,13,1,5,8,15,11,0,14,3,6,2,12,4,9,10,13,1,5,8,15,11,0,14},
                                            {1,5,12,15,11,0,14,3,6,2,7,4,9,10,13,1,5,12,15,11,0,14,3,6,2,7,4,9,10,13},
                                            {0,14,3,6,2,7,4,12,10,13,1,5,8,15,11,0,14,3,6,2,7,4,12,10,13,1,5,8,15,11},
                                            {11,0,14,3,6,2,7,4,9,12,13,1,5,8,15,11,0,14,3,6,2,7,4,9,12,13,1,5,8,15},
                                            {10,13,1,5,8,15,12,0,14,3,6,2,7,4,9,10,13,1,5,8,15,12,0,14,3,6,2,7,4,9},
                                            {5,2,8,7,15,4,11,9,0,10,14,13,3,1,6,5,2,8,7,15,4,11,9,0,10,14,13,3,1,6},
                                            {15,11,0,14,3,6,2,7,4,9,10,12,1,5,8,15,11,0,14,3,6,2,7,4,9,10,12,1,5,8},
                                            {4,9,10,13,1,5,8,15,11,0,12,3,6,2,7,4,9,10,13,1,5,8,15,11,0,12,3,6,2,7},
                                            {13,1,5,8,12,11,0,14,3,6,2,7,4,9,10,13,1,5,8,12,11,0,14,3,6,2,7,4,9,10}};

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else
            {
                int[,] utazasi_tabla = { {0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1},
                                         {0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0},
                                         {0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1},
                                         {0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0},
                                         {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0},
                                         {1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1},
                                         {1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1},
                                         {0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1},
                                         {0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0},
                                         {1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0},
                                         {0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0}};

                int[,] ellenfelek_tabla = { {16,2,5,17,4,12,6,14,8,13,9,10,11,3,15,1,7,16,2,5,17,4,12,6,14,8,13,9,10,11,3,15,1,7},
                                            {7,16,2,5,17,4,12,6,14,8,13,9,10,11,3,0,15,7,16,2,5,17,4,12,6,14,8,13,9,10,11,3,0,15},
                                            {3,0,1,7,16,15,5,17,4,12,6,14,8,13,9,10,11,3,0,1,7,16,15,5,17,4,12,6,14,8,13,9,10,11},
                                            {2,5,17,4,12,6,14,8,13,9,10,11,15,0,1,7,16,2,5,17,4,12,6,14,8,13,9,10,11,15,0,1,7,16},
                                            {9,10,11,3,0,1,7,16,2,5,17,15,12,6,14,8,13,9,10,11,3,0,1,7,16,2,5,17,15,12,6,14,8,13},
                                            {11,3,0,1,7,16,2,15,17,4,12,6,14,8,13,9,10,11,3,0,1,7,16,2,15,17,4,12,6,14,8,13,9,10},
                                            {8,13,9,10,11,3,0,1,7,16,2,5,17,4,12,15,14,8,13,9,10,11,3,0,1,7,16,2,5,17,4,12,15,14},
                                            {1,15,16,2,5,17,4,12,6,14,8,13,9,10,11,3,0,1,15,16,2,5,17,4,12,6,14,8,13,9,10,11,3,0},
                                            {6,14,15,13,9,10,11,3,0,1,7,16,2,5,17,4,12,6,14,15,13,9,10,11,3,0,1,7,16,2,5,17,4,12},
                                            {4,12,6,14,8,13,15,10,11,3,0,1,7,16,2,5,17,4,12,6,14,8,13,15,10,11,3,0,1,7,16,2,5,17},
                                            {17,4,12,6,14,8,13,9,15,11,3,0,1,7,16,2,5,17,4,12,6,14,8,13,9,15,11,3,0,1,7,16,2,5},
                                            {5,17,4,12,6,14,8,13,9,10,15,3,0,1,7,16,2,5,17,4,12,6,14,8,13,9,10,15,3,0,1,7,16,2},
                                            {13,9,10,11,3,0,1,7,16,2,5,17,4,15,6,14,8,13,9,10,11,3,0,1,7,16,2,5,17,4,15,6,14,8},
                                            {12,6,14,8,15,9,10,11,3,0,1,7,16,2,5,17,4,12,6,14,8,15,9,10,11,3,0,1,7,16,2,5,17,4},
                                            {15,8,13,9,10,11,3,0,1,7,16,2,5,17,4,12,6,15,8,13,9,10,11,3,0,1,7,16,2,5,17,4,12,6},
                                            {14,7,8,16,13,2,9,5,10,17,11,4,3,12,0,6,1,14,7,8,16,13,2,9,5,10,17,11,4,3,12,0,6,1},
                                            {0,1,7,15,2,5,17,4,12,6,14,8,13,9,10,11,3,0,1,7,15,2,5,17,4,12,6,14,8,13,9,10,11,3},
                                            {10,11,3,0,1,7,16,2,5,15,4,12,6,14,8,13,9,10,11,3,0,1,7,16,2,5,15,4,12,6,14,8,13,9}};

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }

            individuals[0].GoodnessValue = mingoodness;
        }

        private void CreateIndividualsSingle()
        {
            int count = tournament.Teams.Length;
            if (count == 4)
            {
                int[,] utazasi_tabla = { { 0, 0, 0},
                                         { 0, 1, 1},
                                         { 1, 1, 0},
                                         { 1, 0, 1}};

                int[,] ellenfelek_tabla = { { 2, 1, 3},
                                            { 3, 0, 2},
                                            { 0, 3, 1},
                                            { 1, 2, 0} };

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else if (count == 6)
            {
                int[,] utazasi_tabla = { { 1, 0, 1, 0, 1},
                                         { 1, 1, 0, 1, 0},
                                         { 0, 1, 0, 1, 0},
                                         { 0, 0, 1, 0, 1},
                                         { 1, 0, 1, 1, 0},
                                         { 0, 1, 0, 0, 1} };

                int[,] ellenfelek_tabla = { { 3, 2, 5, 1, 4},
                                            { 2, 4, 3, 0, 5},
                                            { 1, 0, 4, 5, 3},
                                            { 0, 5, 1, 4, 2},
                                            { 5, 1, 2, 3, 0},
                                            { 4, 3, 0, 2, 1} };

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else if (count == 8)
            {
                int[,] utazasi_tabla = { { 1, 0, 1, 0, 1, 0, 1},
                                         { 0, 0, 1, 0, 1, 1, 0},
                                         { 1, 0, 0, 1, 0, 1, 0},
                                         { 1, 1, 1, 0, 1, 0, 1},
                                         { 1, 0, 1, 0, 0, 1, 0},
                                         { 0, 1, 0, 1, 0, 0, 1},
                                         { 0, 1, 0, 1, 1, 0, 1},
                                         { 0, 1, 0, 1, 0, 1, 0} };

                int[,] ellenfelek_tabla = { { 1, 3, 6, 5, 7, 2, 4},
                                            { 0, 5, 7, 2, 4, 6, 3},
                                            { 7, 6, 4, 1, 3, 0, 5},
                                            { 6, 0, 5, 7, 2, 4, 1},
                                            { 5, 7, 2, 6, 1, 3, 0},
                                            { 4, 1, 3, 0, 6, 7, 2},
                                            { 3, 2, 0, 4, 5, 1, 7},
                                            { 2, 4, 1, 3, 0, 5, 6} };

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else if (count == 10)
            {
                int[,] utazasi_tabla = { { 0,1,0,1,0,0,1,0,1},
                                         { 1,0,0,0,1,0,1,0,1},
                                         { 1,0,1,0,1,1,0,1,0},
                                         { 1,0,1,1,0,1,0,1,0},
                                         { 1,1,0,1,0,1,0,1,0},
                                         { 1,0,1,0,1,0,1,0,1},
                                         { 0,0,1,0,1,0,1,1,0},
                                         { 0,1,0,1,0,1,0,1,0},
                                         { 0,1,1,0,1,0,1,0,1},
                                         { 0,1,0,1,0,1,0,0,1}};

                int[,] ellenfelek_tabla = { {2,6,8,1,5,7,9,4,3},
                                            {8,7,5,0,9,4,3,2,6},
                                            {0,9,4,3,7,6,8,1,5},
                                            {9,4,7,2,6,8,1,5,0},
                                            {7,3,2,6,8,1,5,0,9},
                                            {6,8,1,7,0,9,4,3,2},
                                            {5,0,9,4,3,2,7,8,1},
                                            {4,1,3,5,2,0,6,9,8},
                                            {1,5,0,9,4,3,2,6,7},
                                            {3,2,6,8,1,5,0,7,4}};

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else if (count == 12)
            {
                int[,] utazasi_tabla = { {0,1,0,1,0,1,0,1,0,0,1},
                                         {1,0,1,1,1,0,1,0,1,0,1},
                                         {0,1,0,1,0,1,1,0,1,0,1},
                                         {0,1,0,1,0,1,0,1,0,1,0},
                                         {1,0,1,0,0,1,0,1,0,1,0},
                                         {1,0,1,0,1,0,1,0,1,0,1},
                                         {0,0,1,0,1,0,1,1,0,1,0},
                                         {1,0,1,0,1,0,0,1,0,1,0},
                                         {1,1,0,0,1,0,1,0,1,0,1},
                                         {0,1,0,1,0,1,0,0,1,0,1},
                                         {0,1,1,0,1,0,1,0,1,1,0},
                                         {1,0,0,1,0,1,0,1,0,1,0}};

                int[,] ellenfelek_tabla = { {4,7,6,10,8,1,5,9,2,3,11},
                                            {10,8,2,5,9,0,3,11,4,7,6},
                                            {8,11,1,4,5,7,9,6,0,10,3},
                                            {11,4,7,6,10,8,1,5,9,0,2},
                                            {0,3,11,2,7,6,10,8,1,5,9},
                                            {6,10,8,1,2,9,0,3,11,4,7},
                                            {5,9,0,3,11,4,7,2,10,8,1},
                                            {9,0,3,11,4,2,6,10,8,1,5},
                                            {2,1,5,9,0,3,11,4,7,6,10},
                                            {7,6,10,8,1,5,2,0,3,11,4},
                                            {1,5,9,0,3,11,4,7,6,2,8},
                                            {3,2,4,7,6,10,8,1,6,9,0}};

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else if (count == 14)
            {
                int[,] utazasi_tabla = { {0,1,0,1,0,1,0,1,0,1,0,0,1},
                                         {1,0,1,0,1,0,1,1,0,1,0,1,0},
                                         {0,1,0,1,0,1,0,0,1,0,1,0,1},
                                         {0,1,0,1,0,1,0,1,0,0,1,0,1},
                                         {1,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {1,0,1,0,1,1,0,1,0,1,0,1,0},
                                         {1,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {0,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {0,0,1,0,1,0,1,0,1,1,0,1,0},
                                         {0,1,1,0,1,0,1,0,1,0,1,1,0},
                                         {1,0,1,0,0,0,1,0,1,0,1,0,1},
                                         {1,0,0,1,1,0,1,0,1,0,1,0,1},
                                         {0,1,0,0,1,0,1,0,1,0,1,0,1},
                                         {1,0,1,1,0,1,0,1,0,1,0,1,0}};

                int[,] ellenfelek_tabla = { {13,5,1,8,9,12,11,10,6,2,3,7,4},
                                            {2,3,0,4,13,5,7,8,9,12,11,10,6},
                                            {1,8,9,12,11,10,6,7,3,0,4,13,5},
                                            {5,1,8,9,12,11,10,6,2,7,0,4,13},
                                            {7,13,5,1,8,9,12,11,10,6,2,3,0},
                                            {3,0,4,13,7,1,8,9,12,11,10,6,2},
                                            {8,9,12,11,10,7,2,3,0,4,13,5,1},
                                            {4,11,13,10,5,6,1,2,8,3,9,0,12},
                                            {6,2,3,0,4,13,5,1,7,9,12,11,10},
                                            {10,6,2,3,0,4,13,5,1,8,7,12,11},
                                            {9,12,11,7,6,2,3,0,4,13,5,1,8},
                                            {12,7,10,6,2,3,0,4,13,5,1,8,9},
                                            {11,10,6,2,3,0,4,13,5,1,8,9,7},
                                            {0,4,7,5,1,8,9,12,11,10,6,2,3}};

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else if (count == 16)
            {
                int[,] utazasi_tabla = { {0,1,0,1,0,1,0,1,0,0,1,0,1,0,1},
                                         {0,1,0,0,1,0,1,0,1,0,1,0,1,1,0},
                                         {1,0,0,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {0,1,0,1,0,1,0,1,0,1,0,1,0,0,1},
                                         {1,0,1,0,1,0,0,1,0,1,0,1,0,1,0},
                                         {1,1,0,1,1,0,1,0,1,0,1,0,1,0,1},
                                         {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {1,0,1,0,0,1,0,1,0,1,0,1,0,1,0},
                                         {1,0,1,1,0,0,1,0,1,0,1,0,1,0,1},
                                         {1,0,1,0,1,0,1,0,0,1,0,1,0,1,0},
                                         {0,0,1,0,1,0,1,0,1,1,0,1,0,1,0},
                                         {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {0,1,0,1,0,1,0,1,1,0,1,0,1,0,1},
                                         {0,1,1,0,1,0,1,0,1,0,1,1,0,1,0},
                                         {0,1,0,1,0,1,0,1,0,1,0,0,1,0,1},
                                         {1,0,1,0,1,1,1,0,1,0,1,0,1,0,1}};


                int[,] ellenfelek_tabla = { {9,10,13,1,5,8,15,11,12,14,3,6,2,7,4},
                                            {8,15,11,0,14,3,6,2,7,4,9,10,13,12,5},
                                            {6,12,7,4,9,10,13,1,5,8,15,11,0,14,3},
                                            {7,4,9,10,13,1,5,8,15,11,0,14,12,6,2},
                                            {14,3,6,2,7,12,9,10,13,1,5,8,15,11,0},
                                            {12,8,15,11,0,14,3,6,2,7,4,9,10,13,1},
                                            {2,7,4,9,10,13,1,5,8,15,11,0,14,3,12},
                                            {3,6,2,12,4,9,10,13,1,5,8,15,11,0,14},
                                            {1,5,12,15,11,0,14,3,6,2,7,4,9,10,13},
                                            {0,14,3,6,2,7,4,12,10,13,1,5,8,15,11},
                                            {11,0,14,3,6,2,7,4,9,12,13,1,5,8,15},
                                            {10,13,1,5,8,15,12,0,14,3,6,2,7,4,9},
                                            {5,2,8,7,15,4,11,9,0,10,14,13,3,1,6},
                                            {15,11,0,14,3,6,2,7,4,9,10,12,1,5,8},
                                            {4,9,10,13,1,5,8,15,11,0,12,3,6,2,7},
                                            {13,1,5,8,12,11,0,14,3,6,2,7,4,9,10}};

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }
            else
            {
                int[,] utazasi_tabla = { {0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0},
                                         {0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1},
                                         {0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0},
                                         {0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1},
                                         {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1},
                                         {1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1},
                                         {1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0},
                                         {1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0},
                                         {0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0},
                                         {0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1},
                                         {1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
                                         {1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1},
                                         {0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1}};

                int[,] ellenfelek_tabla = { {16,2,5,17,4,12,6,14,8,13,9,10,11,3,15,1,7},
                                            {7,16,2,5,17,4,12,6,14,8,13,9,10,11,3,0,15},
                                            {3,0,1,7,16,15,5,17,4,12,6,14,8,13,9,10,11},
                                            {2,5,17,4,12,6,14,8,13,9,10,11,15,0,1,7,16},
                                            {9,10,11,3,0,1,7,16,2,5,17,15,12,6,14,8,13},
                                            {11,3,0,1,7,16,2,15,17,4,12,6,14,8,13,9,10},
                                            {8,13,9,10,11,3,0,1,7,16,2,5,17,4,12,15,14},
                                            {1,15,16,2,5,17,4,12,6,14,8,13,9,10,11,3,0},
                                            {6,14,15,13,9,10,11,3,0,1,7,16,2,5,17,4,12},
                                            {4,12,6,14,8,13,15,10,11,3,0,1,7,16,2,5,17},
                                            {17,4,12,6,14,8,13,9,15,11,3,0,1,7,16,2,5},
                                            {5,17,4,12,6,14,8,13,9,10,15,3,0,1,7,16,2},
                                            {13,9,10,11,3,0,1,7,16,2,5,17,4,15,6,14,8},
                                            {12,6,14,8,15,9,10,11,3,0,1,7,16,2,5,17,4},
                                            {15,8,13,9,10,11,3,0,1,7,16,2,5,17,4,12,6},
                                            {14,7,8,16,13,2,9,5,10,17,11,4,3,12,0,6,1},
                                            {0,1,7,15,2,5,17,4,12,6,14,8,13,9,10,11,3},
                                            {10,11,3,0,1,7,16,2,5,15,4,12,6,14,8,13,9}};

                Individuals individual = new Individuals() { Utazasi_tabla = utazasi_tabla, Ellenfelek = ellenfelek_tabla };
                individuals.Add(individual);
            }


            individuals[0].GoodnessValue = mingoodness;
        }

        private void GoodnessValueCalculator(Individuals individual)
        {
            for (int i = 0; i < individual.Utazasi_tabla.GetLength(0); i++)
            {
                for (int j = 3; j < individual.Utazasi_tabla.GetLength(1); j++)
                {
                    if (individual.Utazasi_tabla[i, j - 3] == 0)
                    {
                        if (individual.Utazasi_tabla[i, j - 2] == 0)
                        {
                            if (individual.Utazasi_tabla[i, j - 1] == 0)
                            {
                                if (individual.Utazasi_tabla[i, j] == 0)
                                {
                                    individual.GoodnessValue = double.MinValue;
                                    return;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (individual.Utazasi_tabla[i, j - 3] == 1)
                        {
                            if (individual.Utazasi_tabla[i, j - 2] == 1)
                            {
                                if (individual.Utazasi_tabla[i, j - 1] == 1)
                                {
                                    if (individual.Utazasi_tabla[i, j] == 1)
                                    {
                                        individual.GoodnessValue = double.MinValue;
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            individual.GoodnessValue = 0.0;
            for (int i = 0; i < individual.Utazasi_tabla.GetLength(0); i++)
            {
                if (individual.Utazasi_tabla[i, 0] != 0)
                {
                    individual.GoodnessValue +=
                        Models.Haversine.CalculateDistanceBetweenTwoCoordinates
                        (i, individual.Ellenfelek[i, 0]);
                }
                for (int j = 0; j < individual.Utazasi_tabla.GetLength(1) - 1; j++)
                {
                    if (individual.Utazasi_tabla[i, j] + individual.Utazasi_tabla[i, j + 1] > 0)
                    {
                        //ha otthonról megyünk 0-1
                        if (individual.Utazasi_tabla[i, j] == 0)
                        {
                            individual.GoodnessValue +=
                            Models.Haversine.CalculateDistanceBetweenTwoCoordinates
                            (i, individual.Ellenfelek[i, j + 1]);
                        }
                        else //ellenféltől megyünk 1-0 || 1-1
                        {
                            //1-0
                            if (individual.Utazasi_tabla[i, j] == 1 && individual.Utazasi_tabla[i, j + 1] == 0)
                            {
                                individual.GoodnessValue +=
                                Models.Haversine.CalculateDistanceBetweenTwoCoordinates
                                (individual.Ellenfelek[i, j], i);
                            }
                            else
                            {
                                individual.GoodnessValue +=
                                Models.Haversine.CalculateDistanceBetweenTwoCoordinates
                                (individual.Ellenfelek[i, j], individual.Ellenfelek[i, j + 1]);
                            }
                        }
                    }

                }
                if (individual.Utazasi_tabla[i, individual.Utazasi_tabla.GetLength(1) - 1] == 1)
                {
                    individual.GoodnessValue += Models.Haversine.CalculateDistanceBetweenTwoCoordinates
                                (individual.Ellenfelek[i, individual.Utazasi_tabla.GetLength(1) - 1], i);
                }
            }
        }

        private void GeneticAlgorithm()
        {
            int count = 750000;
            while (count-- != 0)
            {
                Mutation();
                Crossover();
                ColumnReplacementDouble();
            }
        }

        private void GeneticAlgorithmSingle()
        {
            int count = 1500000;
            while (count-- != 0)
            {
                MutationSingle();
                Crossover();
                ColumnReplacementSingle();
            }
        }
        private void ColumnReplacementSingle()
        {
            int choosed = GeneticAlgorythm.random.Next(0, individuals.Count);
            int seged;

            int column_1 = GeneticAlgorythm.random.Next(0, column_half);
            int column_2 = GeneticAlgorythm.random.Next(column_half, individuals[0].Ellenfelek.GetLength(1));

            for (int i = 0; i < individuals[choosed].Ellenfelek.GetLength(0); i++)
            {
                seged = individuals[choosed].Ellenfelek[i, column_1];
                individuals[choosed].Ellenfelek[i, column_1] = individuals[choosed].Ellenfelek[i, column_2];
                individuals[choosed].Ellenfelek[i, column_2] = seged;
            }

            double copy_value = individuals[choosed].GoodnessValue;
            GoodnessValueCalculator(individuals[choosed]);
            if (individuals[choosed].GoodnessValue != double.MinValue)
            {
                if (mingoodness > individuals[choosed].GoodnessValue)
                {
                    mingoodness = individuals[choosed].GoodnessValue;
                    Individuals copy = new Individuals(ref tournamentConstraintsAndRules);
                    copy.GoodnessValue = mingoodness;
                    for (int i = 0; i < individuals[choosed].Utazasi_tabla.GetLength(0); i++)
                    {
                        for (int j = 0; j < individuals[choosed].Utazasi_tabla.GetLength(1); j++)
                        {
                            copy.Utazasi_tabla[i, j] = individuals[choosed].Utazasi_tabla[i, j];
                            copy.Ellenfelek[i, j] = individuals[choosed].Ellenfelek[i, j];
                        }
                    }
                    individuals.Add(copy);
                }
            }

            individuals[choosed].GoodnessValue = copy_value;

            for (int i = 0; i < individuals[choosed].Ellenfelek.GetLength(0); i++)
            {
                seged = individuals[choosed].Ellenfelek[i, column_1];
                individuals[choosed].Ellenfelek[i, column_1] = individuals[choosed].Ellenfelek[i, column_2];
                individuals[choosed].Ellenfelek[i, column_2] = seged;
            }
        }

        private void ColumnReplacementDouble()
        {
            int choosed = GeneticAlgorythm.random.Next(0, individuals.Count);
            int seged = column_half / 2;
            int column_1 = GeneticAlgorythm.random.Next(0, seged);
            int column_2 = GeneticAlgorythm.random.Next(seged, column_half);

            for (int i = 0; i < individuals[choosed].Ellenfelek.GetLength(0); i++)
            {
                seged = individuals[choosed].Ellenfelek[i, column_1];
                individuals[choosed].Ellenfelek[i, column_1] = individuals[choosed].Ellenfelek[i, column_2];
                individuals[choosed].Ellenfelek[i, column_2] = seged;

                seged = individuals[choosed].Ellenfelek[i, column_1 + column_half];
                individuals[choosed].Ellenfelek[i, column_1 + column_half] = individuals[choosed].Ellenfelek[i, column_2 + column_half];
                individuals[choosed].Ellenfelek[i, column_2 + column_half] = seged;
            }

            double copy_value = individuals[choosed].GoodnessValue;
            GoodnessValueCalculator(individuals[choosed]);
            if (individuals[choosed].GoodnessValue != double.MinValue)
            {
                if (mingoodness > individuals[choosed].GoodnessValue)
                {
                    mingoodness = individuals[choosed].GoodnessValue;
                    Individuals copy = new Individuals(ref tournamentConstraintsAndRules);
                    copy.GoodnessValue = mingoodness;
                    for (int i = 0; i < individuals[choosed].Utazasi_tabla.GetLength(0); i++)
                    {
                        for (int j = 0; j < individuals[choosed].Utazasi_tabla.GetLength(1); j++)
                        {
                            copy.Utazasi_tabla[i, j] = individuals[choosed].Utazasi_tabla[i, j];
                            copy.Ellenfelek[i, j] = individuals[choosed].Ellenfelek[i, j];
                        }
                    }
                    individuals.Add(copy);
                }
            }

            individuals[choosed].GoodnessValue = copy_value;

            for (int i = 0; i < individuals[choosed].Ellenfelek.GetLength(0); i++)
            {
                seged = individuals[choosed].Ellenfelek[i, column_1];
                individuals[choosed].Ellenfelek[i, column_1] = individuals[choosed].Ellenfelek[i, column_2];
                individuals[choosed].Ellenfelek[i, column_2] = seged;

                seged = individuals[choosed].Ellenfelek[i, column_1 + column_half];
                individuals[choosed].Ellenfelek[i, column_1 + column_half] = individuals[choosed].Ellenfelek[i, column_2 + column_half];
                individuals[choosed].Ellenfelek[i, column_2 + column_half] = seged;
            }
            ;
        }

        private void Mutation()
        {
            int choosed = random.Next(0, individuals.Count);
            int row_index = random.Next(0, row_half);
            int column_index = random.Next(0, column_half);
            int column_index_mirrorred = column_half + column_index;


            if (individuals[choosed].Utazasi_tabla[row_index, column_index] == 0)
            {
                individuals[choosed].Utazasi_tabla[row_index, column_index] = 1;
                individuals[choosed].Utazasi_tabla[row_index, column_index_mirrorred] = 0;
            }
            else
            {
                individuals[choosed].Utazasi_tabla[row_index, column_index] = 0;
                individuals[choosed].Utazasi_tabla[row_index, column_index_mirrorred] = 1;
            }


            int index = row_index + 1;
            while (individuals[choosed].Utazasi_tabla[index, column_index] != individuals[choosed].Utazasi_tabla[row_index, column_index])
            {
                index++;
            }
            if (index < individuals[choosed].Utazasi_tabla.GetLength(0))
            {
                if (individuals[choosed].Utazasi_tabla[index, column_index] == 0)
                {
                    individuals[choosed].Utazasi_tabla[index, column_index] = 1;
                    individuals[choosed].Utazasi_tabla[index, column_index_mirrorred] = 0;
                }
                else
                {
                    individuals[choosed].Utazasi_tabla[index, column_index] = 0;
                    individuals[choosed].Utazasi_tabla[index, column_index_mirrorred] = 1;
                }
            }

            double copy_value = individuals[choosed].GoodnessValue;
            GoodnessValueCalculator(individuals[choosed]);
            if (individuals[choosed].GoodnessValue != double.MinValue)
            {
                if (mingoodness > individuals[choosed].GoodnessValue)
                {
                    mingoodness = individuals[choosed].GoodnessValue;

                    Individuals copy = new Individuals(ref tournamentConstraintsAndRules);
                    copy.GoodnessValue = mingoodness;
                    for (int i = 0; i < individuals[choosed].Utazasi_tabla.GetLength(0); i++)
                    {
                        for (int j = 0; j < individuals[choosed].Utazasi_tabla.GetLength(1); j++)
                        {
                            copy.Utazasi_tabla[i, j] = individuals[choosed].Utazasi_tabla[i, j];
                            copy.Ellenfelek[i, j] = individuals[choosed].Ellenfelek[i, j];
                        }
                    }
                    individuals.Add(copy);
                }
            }
            individuals[choosed].GoodnessValue = copy_value;

            if (individuals[choosed].Utazasi_tabla[row_index, column_index] == 0)
            {
                individuals[choosed].Utazasi_tabla[row_index, column_index] = 1;
                individuals[choosed].Utazasi_tabla[row_index, column_index_mirrorred] = 0;
            }
            else
            {
                individuals[choosed].Utazasi_tabla[row_index, column_index] = 0;
                individuals[choosed].Utazasi_tabla[row_index, column_index_mirrorred] = 1;
            }

            if (individuals[choosed].Utazasi_tabla[index, column_index] == 0)
            {
                individuals[choosed].Utazasi_tabla[index, column_index] = 1;
                individuals[choosed].Utazasi_tabla[index, column_index_mirrorred] = 0;
            }
            else
            {
                individuals[choosed].Utazasi_tabla[index, column_index] = 0;
                individuals[choosed].Utazasi_tabla[index, column_index_mirrorred] = 1;
            }
        }


        private void MutationSingle()
        {
            int choosed = random.Next(0, individuals.Count);
            int row_index = random.Next(0, row_half);
            int column_index = random.Next(0, individuals[choosed].Utazasi_tabla.GetLength(1));


            if (individuals[choosed].Utazasi_tabla[row_index, column_index] == 0)
            {
                individuals[choosed].Utazasi_tabla[row_index, column_index] = 1;
            }
            else
            {
                individuals[choosed].Utazasi_tabla[row_index, column_index] = 0;
            }


            int index = row_index + 1;
            while (individuals[choosed].Utazasi_tabla[index, column_index] != individuals[choosed].Utazasi_tabla[row_index, column_index])
            {
                index++;
            }
            if (index < individuals[choosed].Utazasi_tabla.GetLength(0))
            {
                if (individuals[choosed].Utazasi_tabla[index, column_index] == 0)
                {
                    individuals[choosed].Utazasi_tabla[index, column_index] = 1;
                }
                else
                {
                    individuals[choosed].Utazasi_tabla[index, column_index] = 0;
                }
            }
            double copy_value = individuals[choosed].GoodnessValue;

            GoodnessValueCalculator(individuals[choosed]);

            if (individuals[choosed].GoodnessValue != double.MinValue)
            {
                if (mingoodness > individuals[choosed].GoodnessValue)
                {
                    mingoodness = individuals[choosed].GoodnessValue;

                    Individuals copy = new Individuals(ref tournamentConstraintsAndRules);
                    copy.GoodnessValue = mingoodness;
                    for (int i = 0; i < individuals[choosed].Utazasi_tabla.GetLength(0); i++)
                    {
                        for (int j = 0; j < individuals[choosed].Utazasi_tabla.GetLength(1); j++)
                        {
                            copy.Utazasi_tabla[i, j] = individuals[choosed].Utazasi_tabla[i, j];
                            copy.Ellenfelek[i, j] = individuals[choosed].Ellenfelek[i, j];
                        }
                    }
                    individuals.Add(copy);
                }
            }

            if (individuals[choosed].Utazasi_tabla[row_index, column_index] == 0)
            {
                individuals[choosed].Utazasi_tabla[row_index, column_index] = 1;
            }
            else
            {
                individuals[choosed].Utazasi_tabla[row_index, column_index] = 0;
            }

            if (individuals[choosed].Utazasi_tabla[index, column_index] == 0)
            {
                individuals[choosed].Utazasi_tabla[index, column_index] = 1;
            }
            else
            {
                individuals[choosed].Utazasi_tabla[index, column_index] = 0;
            }
            individuals[choosed].GoodnessValue = copy_value;
        }

        private void Crossover()
        {
            int choosed_one = random.Next(0, individuals.Count / 2);
            int choosed_two = random.Next(individuals.Count / 2, individuals.Count);

            int teamnumber = tournamentConstraintsAndRules.NumberOfTeams;
            int half = teamnumber / 2;
            int cutpoint = random.Next(1, half);
            List<int> vs = new List<int>();
            for (int i = cutpoint; i < half; i++)
            {
                for (int s = 0; s < individuals[0].Utazasi_tabla.GetLength(1); s++)
                {
                    vs.Add(individuals[choosed_one].Utazasi_tabla[i, s]);
                    individuals[choosed_one].Utazasi_tabla[i, s] = individuals[choosed_two].Utazasi_tabla[i, s];
                }
            }

            for (int i = half; i < teamnumber; i++)
            {
                for (int s = 0; s < individuals[choosed_one].Utazasi_tabla.GetLength(1); s++)
                {
                    individuals[choosed_one].Utazasi_tabla[i, s] = individuals[choosed_one].Utazasi_tabla[i - half, s] == 0 ? 1 : 0;
                }
            }

            double copy_value = individuals[choosed_one].GoodnessValue;
            GoodnessValueCalculator(individuals[choosed_one]);
            if (individuals[choosed_one].GoodnessValue != double.MinValue)
            {
                if (mingoodness > individuals[choosed_one].GoodnessValue)
                {
                    mingoodness = individuals[choosed_one].GoodnessValue;

                    Individuals copy = new Individuals(ref tournamentConstraintsAndRules);
                    for (int i = 0; i < individuals[choosed_one].Utazasi_tabla.GetLength(0); i++)
                    {
                        for (int j = 0; j < individuals[choosed_one].Utazasi_tabla.GetLength(1); j++)
                        {
                            copy.Utazasi_tabla[i, j] = individuals[choosed_one].Utazasi_tabla[i, j];
                            copy.Ellenfelek[i, j] = individuals[choosed_one].Ellenfelek[i, j];
                        }
                    }
                    copy.GoodnessValue = mingoodness;
                    individuals.Add(copy);
                }
            }
            choosed_two = 0;
            for (int i = cutpoint; i < half; i++)
            {
                for (int s = 0; s < individuals[0].Utazasi_tabla.GetLength(1); s++)
                {
                    individuals[choosed_one].Utazasi_tabla[i, s] = vs[choosed_two++];
                }
            }

            for (int i = half; i < teamnumber; i++)
            {
                for (int s = 0; s < individuals[choosed_one].Utazasi_tabla.GetLength(1); s++)
                {
                    individuals[choosed_one].Utazasi_tabla[i, s] = individuals[choosed_one].Utazasi_tabla[i - half, s] == 0 ? 1 : 0;
                }
            }
            individuals[choosed_one].GoodnessValue = copy_value;
        }
    }
}
